// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/BayesCircIsotropy.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cvariance
double cvariance(vec x);
RcppExport SEXP BayesCircIsotropy_cvariance(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cvariance(x));
    return rcpp_result_gen;
END_RCPP
}
// atanLF
vec atanLF(vec x, double r);
RcppExport SEXP BayesCircIsotropy_atanLF(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(atanLF(x, r));
    return rcpp_result_gen;
END_RCPP
}
// atanLFdouble
double atanLFdouble(double x, double r);
RcppExport SEXP BayesCircIsotropy_atanLFdouble(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(atanLFdouble(x, r));
    return rcpp_result_gen;
END_RCPP
}
// invAtanLF
vec invAtanLF(vec x, double r);
RcppExport SEXP BayesCircIsotropy_invAtanLF(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(invAtanLF(x, r));
    return rcpp_result_gen;
END_RCPP
}
// invAtanLFdouble
double invAtanLFdouble(double x, double r);
RcppExport SEXP BayesCircIsotropy_invAtanLFdouble(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(invAtanLFdouble(x, r));
    return rcpp_result_gen;
END_RCPP
}
// rvmc
NumericVector rvmc(int n, double mu, double kp);
RcppExport SEXP BayesCircIsotropy_rvmc(SEXP nSEXP, SEXP muSEXP, SEXP kpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type kp(kpSEXP);
    rcpp_result_gen = Rcpp::wrap(rvmc(n, mu, kp));
    return rcpp_result_gen;
END_RCPP
}
// Wapprox
double Wapprox(double t);
RcppExport SEXP BayesCircIsotropy_Wapprox(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(Wapprox(t));
    return rcpp_result_gen;
END_RCPP
}
// sampleKappa
vec sampleKappa(double etag, int eta);
RcppExport SEXP BayesCircIsotropy_sampleKappa(SEXP etagSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type etag(etagSEXP);
    Rcpp::traits::input_parameter< int >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleKappa(etag, eta));
    return rcpp_result_gen;
END_RCPP
}
// computeMeanDirection
double computeMeanDirection(vec th);
RcppExport SEXP BayesCircIsotropy_computeMeanDirection(SEXP thSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type th(thSEXP);
    rcpp_result_gen = Rcpp::wrap(computeMeanDirection(th));
    return rcpp_result_gen;
END_RCPP
}
// computeResultantLength
double computeResultantLength(vec th);
RcppExport SEXP BayesCircIsotropy_computeResultantLength(SEXP thSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type th(thSEXP);
    rcpp_result_gen = Rcpp::wrap(computeResultantLength(th));
    return rcpp_result_gen;
END_RCPP
}
// quantilec
vec quantilec(vec x, vec q);
RcppExport SEXP BayesCircIsotropy_quantilec(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(quantilec(x, q));
    return rcpp_result_gen;
END_RCPP
}
// circQuantile
vec circQuantile(arma::vec th, vec q);
RcppExport SEXP BayesCircIsotropy_circQuantile(SEXP thSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type th(thSEXP);
    Rcpp::traits::input_parameter< vec >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(circQuantile(th, q));
    return rcpp_result_gen;
END_RCPP
}
// estimateMode
double estimateMode(vec x, double cip);
RcppExport SEXP BayesCircIsotropy_estimateMode(SEXP xSEXP, SEXP cipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cip(cipSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateMode(x, cip));
    return rcpp_result_gen;
END_RCPP
}
// computeHDI
vec computeHDI(vec x, double cip);
RcppExport SEXP BayesCircIsotropy_computeHDI(SEXP xSEXP, SEXP cipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cip(cipSEXP);
    rcpp_result_gen = Rcpp::wrap(computeHDI(x, cip));
    return rcpp_result_gen;
END_RCPP
}
// estimateDensity
double estimateDensity(vec x, double x_0, double cip);
RcppExport SEXP BayesCircIsotropy_estimateDensity(SEXP xSEXP, SEXP x_0SEXP, SEXP cipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type x_0(x_0SEXP);
    Rcpp::traits::input_parameter< double >::type cip(cipSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateDensity(x, x_0, cip));
    return rcpp_result_gen;
END_RCPP
}
// rhsll
double rhsll(double b0, double kp, vec bt, vec dt, vec th, mat X, mat D, double r);
RcppExport SEXP BayesCircIsotropy_rhsll(SEXP b0SEXP, SEXP kpSEXP, SEXP btSEXP, SEXP dtSEXP, SEXP thSEXP, SEXP XSEXP, SEXP DSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type kp(kpSEXP);
    Rcpp::traits::input_parameter< vec >::type bt(btSEXP);
    Rcpp::traits::input_parameter< vec >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< vec >::type th(thSEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(rhsll(b0, kp, bt, dt, th, X, D, r));
    return rcpp_result_gen;
END_RCPP
}
// ll
double ll(double b0, double kp, vec bt, vec dt, vec th, mat X, mat D, double r);
RcppExport SEXP BayesCircIsotropy_ll(SEXP b0SEXP, SEXP kpSEXP, SEXP btSEXP, SEXP dtSEXP, SEXP thSEXP, SEXP XSEXP, SEXP DSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type kp(kpSEXP);
    Rcpp::traits::input_parameter< vec >::type bt(btSEXP);
    Rcpp::traits::input_parameter< vec >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< vec >::type th(thSEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(ll(b0, kp, bt, dt, th, X, D, r));
    return rcpp_result_gen;
END_RCPP
}
// logProbNormal
vec logProbNormal(vec x, vec mu, vec sd);
RcppExport SEXP BayesCircIsotropy_logProbNormal(SEXP xSEXP, SEXP muSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< vec >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(logProbNormal(x, mu, sd));
    return rcpp_result_gen;
END_RCPP
}
// truncCauchyPdf
double truncCauchyPdf(double x, double m, double w);
RcppExport SEXP BayesCircIsotropy_truncCauchyPdf(SEXP xSEXP, SEXP mSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(truncCauchyPdf(x, m, w));
    return rcpp_result_gen;
END_RCPP
}
// circGLMC
Rcpp::List circGLMC(vec th, mat X, mat D, vec conj_prior, mat bt_prior, vec starting_values, int burnin, int lag, vec bwb, double kappaModeEstBandwith, double CIsize, int Q, double r, bool returnPostSample, int bt_prior_type, bool reparametrize, bool debug, bool loopDebug, bool betaMHCorrection, bool groupMeanComparisons);
RcppExport SEXP BayesCircIsotropy_circGLMC(SEXP thSEXP, SEXP XSEXP, SEXP DSEXP, SEXP conj_priorSEXP, SEXP bt_priorSEXP, SEXP starting_valuesSEXP, SEXP burninSEXP, SEXP lagSEXP, SEXP bwbSEXP, SEXP kappaModeEstBandwithSEXP, SEXP CIsizeSEXP, SEXP QSEXP, SEXP rSEXP, SEXP returnPostSampleSEXP, SEXP bt_prior_typeSEXP, SEXP reparametrizeSEXP, SEXP debugSEXP, SEXP loopDebugSEXP, SEXP betaMHCorrectionSEXP, SEXP groupMeanComparisonsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type th(thSEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< vec >::type conj_prior(conj_priorSEXP);
    Rcpp::traits::input_parameter< mat >::type bt_prior(bt_priorSEXP);
    Rcpp::traits::input_parameter< vec >::type starting_values(starting_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< vec >::type bwb(bwbSEXP);
    Rcpp::traits::input_parameter< double >::type kappaModeEstBandwith(kappaModeEstBandwithSEXP);
    Rcpp::traits::input_parameter< double >::type CIsize(CIsizeSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< bool >::type returnPostSample(returnPostSampleSEXP);
    Rcpp::traits::input_parameter< int >::type bt_prior_type(bt_prior_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type reparametrize(reparametrizeSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< bool >::type loopDebug(loopDebugSEXP);
    Rcpp::traits::input_parameter< bool >::type betaMHCorrection(betaMHCorrectionSEXP);
    Rcpp::traits::input_parameter< bool >::type groupMeanComparisons(groupMeanComparisonsSEXP);
    rcpp_result_gen = Rcpp::wrap(circGLMC(th, X, D, conj_prior, bt_prior, starting_values, burnin, lag, bwb, kappaModeEstBandwith, CIsize, Q, r, returnPostSample, bt_prior_type, reparametrize, debug, loopDebug, betaMHCorrection, groupMeanComparisons));
    return rcpp_result_gen;
END_RCPP
}
// hmode
double hmode(NumericVector x, double cip);
RcppExport SEXP BayesCircIsotropy_hmode(SEXP xSEXP, SEXP cipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cip(cipSEXP);
    rcpp_result_gen = Rcpp::wrap(hmode(x, cip));
    return rcpp_result_gen;
END_RCPP
}
// hmodeci
NumericVector hmodeci(NumericVector x, double cip);
RcppExport SEXP BayesCircIsotropy_hmodeci(SEXP xSEXP, SEXP cipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cip(cipSEXP);
    rcpp_result_gen = Rcpp::wrap(hmodeci(x, cip));
    return rcpp_result_gen;
END_RCPP
}
